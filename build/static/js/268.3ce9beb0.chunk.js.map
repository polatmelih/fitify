{"version":3,"file":"static/js/268.3ce9beb0.chunk.js","mappings":"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","sources":["components/LineChartWeight.jsx","scenes/line/index.jsx"],"sourcesContent":["import { ResponsiveLine } from \"@nivo/line\";\r\nimport { useState, useEffect } from 'react';\r\nimport { useTheme } from \"@mui/material\";\r\nimport { tokens } from \"../theme\";\r\nimport {api} from \"../utils/api\";\r\n\r\nconst LineChartWeight = ({ isCustomLineColors = false, isDashboard = false }) => {\r\n    const [chartData, setChartData] = useState(Array);\r\n    const dayNames = [\"SO\", \"MO\", \"DI\", \"MI\", \"DO\", \"FR\", \"SA\"];\r\n\r\n    useEffect(() => {\r\n        const fetchWeightData = async () => {\r\n            try {\r\n                const response = await api.get('/get-weight.php');\r\n                const weightData = response.data.map(entry => ({\r\n                    x: dayNames[new Date(entry.date).getDay()], // Converts the date string to a Date object\r\n                    y: entry.weight\r\n                }));\r\n\r\n                const goalWeightData = response.data.map(entry => ({\r\n                    x: dayNames[new Date(entry.date).getDay()], // Converts the date string to a Date object\r\n                    y: entry.goal_weight\r\n                }));\r\n\r\n                setChartData([\r\n                    { id: 'Gewicht', data: weightData, color: tokens(\"dark\").blueAccent[300] },\r\n                    { id: 'Zielgewicht', data: goalWeightData, color: tokens(\"dark\").greenAccent[500] }\r\n                ]);\r\n            } catch (error) {\r\n                alert(error.response.data.message);\r\n            }\r\n        };\r\n\r\n        if (sessionStorage.getItem(\"role\").toString().toLowerCase() !== \"coach\" || sessionStorage.getItem(\"sus_id\")) fetchWeightData();\r\n    }, []);\r\n\r\n\r\n    const theme = useTheme();\r\n    const colors = tokens(theme.palette.mode);\r\n\r\n    if (!chartData) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    return (\r\n        <ResponsiveLine\r\n            data={chartData}\r\n            theme={{\r\n                axis: {\r\n                    domain: {\r\n                        line: {\r\n                            stroke: colors.grey[100],\r\n                        },\r\n                    },\r\n                    legend: {\r\n                        text: {\r\n                            fill: colors.grey[100],\r\n                        },\r\n                    },\r\n                    ticks: {\r\n                        line: {\r\n                            stroke: colors.grey[100],\r\n                            strokeWidth: 1,\r\n                        },\r\n                        text: {\r\n                            fill: colors.grey[100],\r\n                        },\r\n                    },\r\n                },\r\n                legends: {\r\n                    text: {\r\n                        fill: colors.grey[100],\r\n                    },\r\n                },\r\n                tooltip: {\r\n                    container: {\r\n                        color: colors.primary[500],\r\n                    },\r\n                },\r\n            }}\r\n            colors={isDashboard ? { datum: \"color\" } : { scheme: \"nivo\" }} // added\r\n            margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\r\n            xScale={{ type: \"point\" }}\r\n            yScale={{\r\n                type: \"linear\",\r\n                min: \"auto\",\r\n                max: \"auto\",\r\n                stacked: false,\r\n                reverse: false,\r\n            }}\r\n            yFormat=\" >-.2f\"\r\n            curve=\"catmullRom\"\r\n            axisTop={null}\r\n            axisRight={null}\r\n            axisBottom={{\r\n                orient: \"bottom\",\r\n                tickSize: 0,\r\n                tickPadding: 5,\r\n                tickRotation: 0,\r\n                legend: isDashboard ? undefined : \"Monate\", // added\r\n                legendOffset: 36,\r\n                legendPosition: \"middle\",\r\n            }}\r\n            axisLeft={{\r\n                orient: \"left\",\r\n                tickValues: 5, // added\r\n                tickSize: 3,\r\n                tickPadding: 5,\r\n                tickRotation: 0,\r\n                legend: isDashboard ? undefined : \"in kg\", // added\r\n                legendOffset: -40,\r\n                legendPosition: \"middle\",\r\n            }}\r\n            enableGridX={false}\r\n            enableGridY={false}\r\n            pointSize={8}\r\n            pointColor={{ theme: \"background\" }}\r\n            pointBorderWidth={2}\r\n            pointBorderColor={{ from: \"serieColor\" }}\r\n            pointLabelYOffset={-12}\r\n            useMesh={true}\r\n            legends={[\r\n                {\r\n                    anchor: \"bottom-right\",\r\n                    direction: \"column\",\r\n                    justify: false,\r\n                    translateX: 100,\r\n                    translateY: 0,\r\n                    itemsSpacing: 0,\r\n                    itemDirection: \"left-to-right\",\r\n                    itemWidth: 80,\r\n                    itemHeight: 20,\r\n                    itemOpacity: 0.75,\r\n                    symbolSize: 12,\r\n                    symbolShape: \"circle\",\r\n                    symbolBorderColor: \"rgba(0, 0, 0, .5)\",\r\n                    effects: [\r\n                        {\r\n                            on: \"hover\",\r\n                            style: {\r\n                                itemBackground: \"rgba(0, 0, 0, .03)\",\r\n                                itemOpacity: 1,\r\n                            },\r\n                        },\r\n                    ],\r\n                },\r\n            ]}\r\n        />\r\n    );\r\n};\r\n\r\nexport default LineChartWeight;","import {Box, Button, TextField} from \"@mui/material\";\r\nimport Header from \"../../components/Header\";\r\nimport LineChartWeight from \"../../components/LineChartWeight\";\r\nimport {useState} from \"react\";\r\nimport {api} from \"../../utils/api\";\r\n\r\nconst Line = () => {\r\n    const [input1, setInput1] = useState(\"\");\r\n    const [input2, setInput2] = useState(\"\");\r\n    const [rerender1, setRerender1] = useState(crypto.randomUUID());\r\n\r\n    const handleSubmit = async () => {\r\n        try {\r\n            const requestBody = JSON.parse(JSON.stringify({\"weight\": input1, \"goal_weight\": input2}));\r\n            await api.post(\"/set-weight.php\", requestBody);\r\n            setInput1(\"\")\r\n            setInput2(\"\")\r\n            setRerender1(crypto.randomUUID())\r\n        } catch (error) {\r\n            alert(error.response.data.message);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Box m=\"20px\">\r\n            <Header title=\"Gewichtsdetails\" subtitle=\"Alles im Überblick\" />\r\n            {sessionStorage.getItem(\"role\").toString().toLowerCase() !== \"coach\" &&\r\n            <Box>\r\n                <TextField type=\"number\" value={input1} label=\"Gewicht\" variant=\"outlined\" onChange={(e) => setInput1(e.target.value)} sx={{mr: \"20px\"}} />\r\n                <TextField type=\"number\" value={input2} label=\"Zielgewicht\" variant=\"outlined\" onChange={(e) => setInput2(e.target.value)} sx={{mr: \"20px\"}} />\r\n                <Button\r\n                    disabled={!input1 || !input2}\r\n                    variant=\"contained\"\r\n                    size=\"large\"\r\n                    sx={{height: \"50px\"}}\r\n                    onClick={handleSubmit}\r\n                >Eintragen</Button>\r\n            </Box>}\r\n            <Box height=\"75vh\">\r\n                <LineChartWeight key={rerender1} />\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Line;"],"names":["_ref","isCustomLineColors","_ref$isDashboard","isDashboard","_useState","useState","Array","_useState2","_slicedToArray","chartData","setChartData","dayNames","useEffect","fetchWeightData","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","weightData","goalWeightData","wrap","_context","prev","next","api","get","sent","data","map","entry","x","Date","date","getDay","y","weight","goal_weight","id","color","tokens","blueAccent","greenAccent","t0","alert","message","stop","apply","arguments","sessionStorage","getItem","toString","toLowerCase","theme","useTheme","colors","palette","mode","_jsx","ResponsiveLine","axis","domain","line","stroke","grey","legend","text","fill","ticks","strokeWidth","legends","tooltip","container","primary","datum","scheme","margin","top","right","bottom","left","xScale","type","yScale","min","max","stacked","reverse","yFormat","curve","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","undefined","legendOffset","legendPosition","axisLeft","tickValues","enableGridX","enableGridY","pointSize","pointColor","pointBorderWidth","pointBorderColor","from","pointLabelYOffset","useMesh","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","style","itemBackground","children","input1","setInput1","_useState3","_useState4","input2","setInput2","_useState5","crypto","randomUUID","_useState6","rerender1","setRerender1","handleSubmit","requestBody","JSON","parse","stringify","post","_jsxs","Box","m","Header","title","subtitle","TextField","value","label","variant","onChange","e","target","sx","mr","Button","disabled","size","height","onClick","LineChartWeight"],"sourceRoot":""}